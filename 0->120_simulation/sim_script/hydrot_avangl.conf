#############################################################
## JOB DESCRIPTION                                         ##
#############################################################

# Minimization and Equilibration of 
# F1-ATPase in a Water Box by using AMBER force field


#############################################################
## ADJUSTABLE PARAMETERS                                   ##
#############################################################

#structure          ../common/ubq_wb.psf
#coordinates        frame_10.pdb

set temperature    310
set outputname     F1-IF1DP.ff14SB_ionwat.rothyd.0-40deg.1

# Continuing a job from the restart files
if {1} {
set inputname      ../stage4-2_eq-rbN10/F1-IF1DP.ff14SB_ionwat.eq.2
binCoordinates     $inputname.restart.coor
binVelocities      $inputname.restart.vel  ;# remove the "temperature" entry if you use this!
extendedSystem	   $inputname.restart.xsc
} 

firsttimestep      0


#############################################################
## SIMULATION PARAMETERS                                   ##
#############################################################

# Input
#paraTypeCharmm	    off
#parameters          ../common/par_all27_prot_lipid.inp 
#temperature         $temperature

# AMBER
amber          on  # Specify this is AMBER force field
parmfile       ../common/F1-IF1DP.ff14SB_ionwat.prmtop  # Input PARM file
ambercoor      ../common/F1-IF1DP.ff14SB_ionwat.prmcrd  # Input coordinate file
exclude        scaled1-4
1-4scaling     0.833333  # =1/1.2, default is 1.0


# Force-Field Parameters
#exclude             scaled1-4
#1-4scaling          1.0
cutoff              12.0
switching           on
switchdist          10.0
pairlistdist        15.0

# Integrator Parameters
timestep            2.0  ;# 2fs/step
rigidBonds          all  ;# needed for 2fs steps
nonbondedFreq       1
fullElectFrequency  2  
stepspercycle       10


# Constant Temperature Control
langevin            on    ;# do langevin dynamics
langevinDamping     1     ;# damping coefficient (gamma) of 1/ps
langevinTemp        $temperature
langevinHydrogen    off    ;# don't couple langevin bath to hydrogens


# Periodic Boundary Conditions
#cellBasisVector1   140.3   0.0   0.0
#cellBasisVector2     0.0 134.5   0.0
#cellBasisVector3     0.0   0.0 162.4
#cellOrigin          73.3   70.4  85.4

wrapAll             on


# PME (for full-system periodic electrostatics)
PME                 yes
PMEGridSpacing      1.0

#manual grid definition
#PMEGridSizeX        45
#PMEGridSizeY        45
#PMEGridSizeZ        48


# Constant Pressure Control (variable volume)
useGroupPressure      yes ;# needed for rigidBonds
useFlexibleCell       no
useConstantArea       no

langevinPiston        on
langevinPistonTarget  1.01325 ;#  in bar -> 1 atm
langevinPistonPeriod  100.0
langevinPistonDecay   50.0
langevinPistonTemp    $temperature


# Output
outputName          $outputname

restartfreq        5000     ;# 2500steps = every 5ps
dcdfreq            5000
xstFreq            5000
outputEnergies      100
outputPressure      100


# Harmonic restraint
constraints         on
consexp             2
consref             ../common/F1-IF1DP.ff14SB_ionwat.restrain.N-term-b10.pdb
conskfile           ../common/F1-IF1DP.ff14SB_ionwat.restrain.N-term-b10.pdb
conskcol            O


#############################################################
## EXTRA PARAMETERS                                        ##
#############################################################


#############################################################
## EXECUTION SCRIPT                                        ##
#############################################################

# Minimization
#minimize            1000
#reinitvels          $temperature

tclForces            on
tclForcesScript {

  # The ID of force-applied groupes
  set alist4 {}  
  for {set rid 2872} {$rid <= 3143} {incr rid} {
    set aid [atomid MAIN $rid CA]
    addatom $aid
    lappend alist4 $aid
  }

  # Read initial coords of gamma
  set xyz0 {}
  set f [open ../common/F1-IF1DP.ff14SB_ionwat_g.ca.data]
  while {[gets $f line] >= 0} {
    set elements [regexp -all -inline {\S+} $line]
    set temp [list [lindex $elements 0] [lindex $elements 1] [lindex $elements 2]]
    lappend xyz0 $temp
  }
  close $f

  # Set parameters
  set k 1000000 
  set PI 3.14159
  set ifile [open avangl.dat w]
  set savets 500
  puts $ifile "#     time| tgt angl|  tgt cos|  ave cos|  tgt sin|  ave sin"
  flush $ifile

  # Initial setting
  # rotationa axis
  set v {0.0 0.0 1.0}
  # calculate initial CM
  set nca [llength $alist4]
  set cmsum {0.0 0.0 0.0}
  for {set ica 0} {$ica < $nca} {incr ica} {
      set temp [lindex $xyz0 $ica]
      set cmsum [vecadd $cmsum $temp]
  }
  set pre [expr 1.0/$nca]
  set rcm0 [vecscale $pre $cmsum]
  # calculate initial ri - rcm
  set ricm {}
  for {set ica 0} {$ica < $nca} {incr ica} {
      set temp [lindex $xyz0 $ica]
      set temp [vecsub $temp $rcm0]
      lappend ricm $temp
  }
  # calculate initial si
  set si0 {}
  set vx [lindex $v 0]
  set vy [lindex $v 1]
  set vz [lindex $v 2]
  for {set ica 0} {$ica < $nca} {incr ica} {
      set xyz [lindex $ricm $ica]
      set x [lindex $xyz 0]
      set y [lindex $xyz 1]
      set z [lindex $xyz 2]
      set prev [expr $x*$vx+$y*$vy+$z*$vz]
      set temp [vecscale $prev $v]
      set xyz1 [vecsub $xyz $temp]
      set r0 [veclength $xyz1]
      set pre [expr 1.0/$r0]
      set xyz1 [vecscale $pre $xyz1]
      lappend si0 $xyz1
  }

  # for speedup
  set forcesRecalcFreq 20
  set forcecount $forcesRecalcFreq  
  # initial force
  set forces2 {}
  foreach ica $alist4 {
      lappend forces2 {0.0 0.0 0.0}
  }


  proc calcforces {} {
  
    global k PI ifile savets
    global alist4
    global v nca si0
    global forcesRecalcFreq forcecount forces2

    set ts [getstep]

    # preparing for recalculation of forces in next time step
    if { $forcecount == [expr $forcesRecalcFreq - 1] } {
       foreach ica $alist4 {
       	   addatom $ica	   
       }
    }

    # recalculate forces
    if { $forcecount == $forcesRecalcFreq } {
       loadcoords p
       
       # Calculate target cos, sin
       set phit [expr (1.0*$PI/180.0)*$ts/500000]
       set cost [expr cos($phit)]
       set sint [expr sin($phit)]

       # Calculate CM
       set cmsum {0.0 0.0 0.0}
       foreach ica $alist4 {
           set cmsum [vecadd $cmsum $p($ica)]
       }
       set pre [expr 1.0/$nca]
       set rcm [vecscale $pre $cmsum]
      
       # Calculate ri - rcm
       set ricm {}
       foreach ica $alist4 {
           set temp [vecsub $p($ica) $rcm]
	   lappend ricm $temp
       }

       # Calculate si, Sri, Sricosi, Srisini, Ssi0, Ssi, Svxsi0
       set vx [lindex $v 0]
       set vy [lindex $v 1]
       set vz [lindex $v 2]
       set si {}
       set Sri {0.0}
       set Sricosi {0.0}
       set Srisini {0.0}
       set Ssi0 {0.0 0.0 0.0}
       set Ssi {0.0 0.0 0.0}
       set Svxsi0 {0.0 0.0 0.0}
       for {set ica 0} {$ica < $nca} {incr ica} {
    	   set xyz [lindex $ricm $ica]
	   set x [lindex $xyz 0]
	   set y [lindex $xyz 1]
	   set z [lindex $xyz 2]
	   set prev [expr $x*$vx+$y*$vy+$z*$vz]
	   set temp [vecscale $prev $v]
      	   set xyz1 [vecsub $xyz $temp]
	   set r [veclength $xyz1]
      	   set pre [expr 1.0/$r]
      	   set xyz1 [vecscale $pre $xyz1]
      	   lappend si $xyz1
	   set Sri [expr $Sri+$r]

	   set xyz0 [lindex $si0 $ica]
	   set x0 [lindex $xyz0 0]
	   set y0 [lindex $xyz0 1]
	   set z0 [lindex $xyz0 2]
	   set x1 [lindex $xyz1 0]
	   set y1 [lindex $xyz1 1]
	   set z1 [lindex $xyz1 2]
	   set temp [expr $x0*$x1+$y0*$y1+$z0*$z1]	   
	   set temp [expr $r*$temp]
	   set Sricosi [expr $Sricosi+$temp]
	
	   set x2 [expr $vy*$z0-$vz*$y0]
	   set y2 [expr $vz*$x0-$vx*$z0]
	   set z2 [expr $vx*$y0-$vy*$x0]
	   set xyz2 [list $x2 $y2 $z2]
	   set temp [expr $x2*$x1+$y2*$y1+$z2*$z1]	   
	   set temp [expr $r*$temp]
	   set Srisini [expr $Srisini+$temp]

	   set Ssi0 [vecadd $Ssi0 $xyz0]

	   set Ssi [vecadd $Ssi $xyz1]
	
	   set Svxsi0 [vecadd $Svxsi0 $xyz2]
       }    
    
       # The force to be applied
       set forces2 {}
       for {set ica 0} {$ica < $nca} {incr ica} {
	   # force from cos term
	   set part1 [expr -$k*(($Sricosi/$Sri)-$cost)/($Sri*$Sri)]
	   set pre [expr -1.0/$nca]
	   set vec1 [vecscale $pre $Ssi0]
	   set xyz0 [lindex $si0 $ica]
	   set vec2 $xyz0
	   set vec3 [vecscale $pre $Ssi]
	   set vec4 [lindex $si $ica]
	   set temp1 [vecadd $vec1 $vec2]
	   set temp1 [vecscale $Sri $temp1]
	   set temp2 [vecadd $vec3 $vec4]
	   set temp2 [vecscale $Sricosi $temp2]
	   set part2 [vecsub $temp1 $temp2]
	   set forcec [vecscale $part1 $part2]
	   # force from sin term
	   set part1 [expr -$k*(($Srisini/$Sri)-$sint)/($Sri*$Sri)]
	   set vec1 [vecscale $pre $Svxsi0]
	   set x0 [lindex $xyz0 0]
	   set y0 [lindex $xyz0 1]
	   set z0 [lindex $xyz0 2]
	   set x2 [expr $vy*$z0-$vz*$y0]
	   set y2 [expr $vz*$x0-$vx*$z0]
	   set z2 [expr $vx*$y0-$vy*$x0]
	   set vec2 [list $x2 $y2 $z2]
	   set temp1 [vecadd $vec1 $vec2]
	   set temp1 [vecscale $Sri $temp1]
	   set temp2 [vecadd $vec3 $vec4]
	   set temp2 [vecscale $Srisini $temp2]
	   set part2 [vecsub $temp1 $temp2]
	   set forces [vecscale $part1 $part2]
       	   # force to be applied
	   set force1 [vecadd $forcec $forces]
	   lappend forces2 $force1
       }  
       set forcecount 0
       clearconfig
    }
    incr forcecount
  
    # apply force 
    foreach ica $alist4 forcea $forces2 {   	
    	#puts $ifile "force: $ica $forcea"
	#flush $ifile
        addforce $ica $forcea
    }

    # OUTPUT
    set n [expr $ts/$savets]
    if {$ts == $n*$savets} {
	set phitdeg [expr $phit*180/$PI]
        set cosav [expr $Sricosi/$Sri]
        set sinav [expr $Srisini/$Sri]
	puts $ifile [format "%10d%10.3f%10.5f%10.5f%10.5f%10.5f" $ts $phitdeg $cost $cosav $sint $sinav]
    	flush $ifile
    }

  }
}


#run 500000 ;# 1ns
#run 1000000 ;# 2ns
#run 2500000 ;# 5ns
#run 5000000 ;# 10ns
run 20000000 ;# 40ns, 1deg/ns = 40deg


